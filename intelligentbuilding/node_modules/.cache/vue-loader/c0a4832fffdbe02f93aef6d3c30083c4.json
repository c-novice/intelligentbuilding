{"remainingRequest":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\src\\components\\Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\src\\components\\Home.vue","mtime":1629731362981},{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lzq\\WebstormProjects\\智慧楼宇\\intelligentbuilding\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2NvbnRhaW5lciB7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHJpZ2h0OiAwOwogIHdpZHRoOiA4MCU7Cn0K"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8cA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <el-container>\n    <el-aside>\n      <el-switch v-model=\"switchRoaming\" :disabled=\"!ableRoaming\" active-text=\"漫游模式\" inactive-text=\" \" @change=\"roamingChange\"></el-switch>\n      <el-switch v-model=\"switchPatrol\" :disabled=\"!ablePatrol\" active-text=\"楼层巡视\" inactive-text=\" \" @change=\"patrolChange\"></el-switch>\n      <br><br>\n      <el-tree :data=\"simpleData\" show-checkbox default-expand-all node-key=\"id\" ref=\"tree1\" highlight-current\n               :props=\"defaultProps\" @check=\"handleTreeNodeClick\">\n      </el-tree>\n      <el-tree :data=\"detailData\" show-checkbox default-expand-all node-key=\"id\" ref=\"tree2\" highlight-current\n               :props=\"defaultProps\" @check=\"handleTreeNodeClick\">\n      </el-tree>\n    </el-aside>\n    <el-main>\n      <div id=\"container\"></div>\n    </el-main>\n  </el-container>\n</template>\n\n<script>\nimport * as THREE from 'three/build/three.module'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min'\n// 场景和控制器\nlet scene = null\nlet controls = null\nlet camera = null\n// 详细模型的楼板\nlet floor = new Array(10)\n// 详细模型的桌椅\nlet context = new Array(10)\n// 漫游和巡视模式\nlet tweens = new Array(1000)\nlet positions = new Array(1000)\n\nexport default {\n  data () {\n    return {\n      // 漫游与巡视按钮\n      ableRoaming: false,\n      switchRoaming: false,\n      ablePatrol: false,\n      switchPatrol: false,\n      // 树形组件\n      simpleData: [{ id: 0, label: '整体模型' }],\n      detailData: [{\n        id: 1,\n        label: '详细模型',\n        children: [\n          { id: 11, label: '1L', children: [{ id: 101, label: '1L墙体' }, { id: 102, label: '1L桌椅' }] },\n          { id: 12, label: '2L', children: [{ id: 103, label: '2L墙体' }, { id: 104, label: '2L桌椅' }] },\n          { id: 13, label: '3L', children: [{ id: 105, label: '3L墙体' }, { id: 106, label: '3L桌椅' }] },\n          { id: 14, label: '4L', children: [{ id: 107, label: '4L墙体' }, { id: 108, label: '4L桌椅' }] },\n          { id: 15, label: '5L', children: [{ id: 109, label: '5L墙体' }, { id: 110, label: '5L桌椅' }] },\n          { id: 16, label: '6L', children: [{ id: 111, label: '6L墙体' }, { id: 112, label: '6L桌椅' }] }\n        ]\n      }],\n      defaultProps: {\n        children: 'children',\n        label:\n          'label'\n      },\n      // 场景组件\n      renderer: null,\n      mesh: null,\n      clock: null,\n      // 判断加载\n      isLoaded: Array.apply(null, Array(20)).map(() => false)\n    }\n  },\n  mounted () {\n    this.init()\n    this.animate()\n  },\n  methods: {\n    // 漫游\n    roamingChange (state) {\n      this.switchRoaming = !this.switchRoaming\n      if (state) { // 执行漫游\n        // 获取当前的选中楼层\n        let checked = null\n        if (this.isLoaded[0]) {\n          checked = 0\n        } else {\n          for (let i = 11; i <= 16; i++) {\n            if (this.isLoaded[i]) {\n              checked = i\n              break\n            }\n          }\n        }\n        // 执行漫游\n        if (checked === null) console.assert('roaming bug')\n        else {\n          tweens[checked % 10 * 10].start()\n          // 监控鼠标单击\n          let cur = 0\n          document.onclick = function () {\n            // eslint-disable-next-line eqeqeq\n            if (cur === 0) {\n              cur = cur + 1\n              alert('点击确定开始漫游')\n            } else if (cur === 1) {\n              cur = 2\n              let myVar = setInterval(go, 1000)\n              // 超时15秒\n              let count = 0\n              let outTime = 4\n              // eslint-disable-next-line no-inner-declarations\n              function go () {\n                count++\n                // eslint-disable-next-line eqeqeq\n                if (count === outTime) {\n                  tweens[checked % 10 * 10].start()\n                  clearInterval(myVar)\n                  cur = 1\n                }\n              }\n              let x, y\n              // 监听鼠标\n              document.onmousemove = function (event) {\n                const x1 = event.clientX\n                const y1 = event.clientY\n                if (x !== x1 || y !== y1) {\n                  count = 0\n                }\n                x = x1\n                y = y1\n              }\n              for (let i = 0; i < 70; ++i) {\n                tweens[i].stop()\n              }\n            } else {\n              cur = 1\n              tweens[checked % 10 * 10].start()\n            }\n          }\n        }\n      } else { // 停止漫游\n        for (let i = 0; i < 70; ++i) {\n          tweens[i].stop()\n        }\n      }\n    },\n    // 巡视\n    patrolChange (state) {\n      this.switchPatrol = !this.switchPatrol\n      if (state) { // 执行巡视\n        // 获取当前的选中楼层\n        let checked = null\n        for (let i = 11; i <= 16; i++) {\n          if (this.isLoaded[i]) {\n            checked = i\n            break\n          }\n        }\n        // 执行漫游\n        if (checked === null) console.assert('patrol bug')\n        else {\n          tweens[checked % 10 * 100].start()\n        }\n      } else { // 停止巡视\n        for (let i = 100; i < 700; ++i) {\n          tweens[i].stop()\n        }\n      }\n    },\n    // 选择状态置空\n    resetChecked () {\n      this.$refs.tree1.setCheckedKeys([])\n      this.$refs.tree2.setCheckedKeys([])\n    },\n    setCheckedKeys (id) {\n      this.$refs.tree1.setCheckedKeys([id])\n      this.$refs.tree2.setCheckedKeys([id])\n    },\n    // 点击树节点事件处理\n    handleTreeNodeClick (data) {\n      // 模拟tree加载情况\n      // 模型加载模块\n      if (data.id === 0) { // 整体模型\n        this.resetChecked()\n        if (!this.isLoaded[0]) this.setCheckedKeys(0)\n        this.isLoaded[0] = !this.isLoaded[0]\n        if (this.isLoaded[0]) {\n          floor[1].visible = floor[2].visible = floor[3].visible = floor[4].visible = floor[5].visible = floor[6].visible = true\n          context[1].visible = context[2].visible = context[3].visible = context[4].visible = context[5].visible = context[6].visible = false\n        } else {\n          floor[1].visible = floor[2].visible = floor[3].visible = floor[4].visible = floor[5].visible = floor[6].visible = false\n          context[1].visible = context[2].visible = context[3].visible = context[4].visible = context[5].visible = context[6].visible = false\n        }\n      } else { // 详细模型\n        if (this.isLoaded[0]) {\n          this.resetChecked()\n          this.isLoaded[0] = false\n          this.setCheckedKeys(data.id)\n          floor[1].visible = floor[2].visible = floor[3].visible = floor[4].visible = floor[5].visible = floor[6].visible = false\n          context[1].visible = context[2].visible = context[3].visible = context[4].visible = context[5].visible = context[6].visible = false\n        }\n      }\n      // 楼层状态更新\n      this.isLoaded[11] = floor[1].visible && context[1].visible\n      this.isLoaded[12] = floor[2].visible && context[2].visible\n      this.isLoaded[13] = floor[3].visible && context[3].visible\n      this.isLoaded[14] = floor[4].visible && context[4].visible\n      this.isLoaded[15] = floor[5].visible && context[5].visible\n      this.isLoaded[16] = floor[6].visible && context[6].visible\n      this.isLoaded[1] = floor[1].visible && context[1].visible && floor[2].visible && context[2].visible &&\n        floor[3].visible && context[3].visible && floor[4].visible && context[4].visible &&\n        floor[5].visible && context[5].visible && floor[6].visible && context[6].visible\n      // 加载和删除模型\n      switch (data.id) {\n        case 1:\n          this.isLoaded[1] = !this.isLoaded[1]\n          floor[1].visible = floor[2].visible = floor[3].visible = floor[4].visible = floor[5].visible = floor[6].visible = this.isLoaded[1]\n          context[1].visible = context[2].visible = context[3].visible = context[4].visible = context[5].visible = context[6].visible = this.isLoaded[1]\n          break\n        case 11:\n          this.isLoaded[11] = !this.isLoaded[11]\n          floor[1].visible = context[1].visible = this.isLoaded[11]\n          break\n        case 12:\n          this.isLoaded[12] = !this.isLoaded[12]\n          floor[2].visible = context[2].visible = this.isLoaded[12]\n          break\n        case 13:\n          this.isLoaded[13] = !this.isLoaded[13]\n          floor[3].visible = context[3].visible = this.isLoaded[13]\n          break\n        case 14:\n          this.isLoaded[14] = !this.isLoaded[14]\n          floor[4].visible = context[4].visible = this.isLoaded[14]\n          break\n        case 15:\n          this.isLoaded[15] = !this.isLoaded[15]\n          floor[5].visible = context[5].visible = this.isLoaded[15]\n          break\n        case 16:\n          this.isLoaded[16] = !this.isLoaded[16]\n          floor[6].visible = context[6].visible = this.isLoaded[16]\n          break\n        case 101:\n          floor[1].visible = !floor[1].visible\n          if (floor[1].visible === context[1].visible) this.isLoaded[11] = floor[1].visible\n          break\n        case 102:\n          context[1].visible = !context[1].visible\n          if (floor[1].visible === context[1].visible) this.isLoaded[11] = floor[1].visible\n          break\n        case 103:\n          floor[2].visible = !floor[2].visible\n          if (floor[2].visible === context[2].visible) this.isLoaded[12] = floor[2].visible\n          break\n        case 104:\n          context[2].visible = !context[2].visible\n          if (floor[2].visible === context[2].visible) this.isLoaded[12] = floor[2].visible\n          break\n        case 105:\n          floor[3].visible = !floor[3].visible\n          if (floor[3].visible === context[3].visible) this.isLoaded[13] = floor[3].visible\n          break\n        case 106:\n          context[3].visible = !context[3].visible\n          if (floor[3].visible === context[3].visible) this.isLoaded[13] = floor[3].visible\n          break\n        case 107:\n          floor[4].visible = !floor[4].visible\n          if (floor[4].visible === context[4].visible) this.isLoaded[14] = floor[4].visible\n          break\n        case 108:\n          context[4].visible = !context[4].visible\n          if (floor[4].visible === context[4].visible) this.isLoaded[14] = floor[4].visible\n          break\n        case 109:\n          floor[5].visible = !floor[5].visible\n          if (floor[5].visible === context[5].visible) this.isLoaded[15] = floor[5].visible\n          break\n        case 110:\n          context[5].visible = !context[5].visible\n          if (floor[5].visible === context[5].visible) this.isLoaded[15] = floor[5].visible\n          break\n        case 111:\n          floor[6].visible = !floor[6].visible\n          if (floor[6].visible === context[6].visible) this.isLoaded[16] = floor[6].visible\n          break\n        case 112:\n          context[6].visible = !context[6].visible\n          if (floor[6].visible === context[6].visible) this.isLoaded[16] = floor[6].visible\n          break\n      }\n      // 漫游和巡视模块\n      let countLoad = 0\n      let isConsistSingle = false\n      for (let i = 11; i <= 16; ++i) {\n        if (this.isLoaded[i]) countLoad++\n        if (context[i % 10].visible !== floor[i % 10].visible) isConsistSingle = true\n      }\n      console.log(countLoad, isConsistSingle)\n      this.ableRoaming = (!isConsistSingle && countLoad === 1) || this.isLoaded[0]\n      this.ablePatrol = !isConsistSingle && (countLoad === 1)\n    },\n    // 初始化\n    init () {\n      // 创建场景对象Scene\n      this.container = document.getElementById('container')\n      this.container.style.height = window.innerHeight + 'px'\n      scene = new THREE.Scene()\n      scene.background = new THREE.Color(0xbfd1e5)\n      // 创建渲染器对象\n      this.renderer = new THREE.WebGLRenderer({ antialias: true })\n      this.renderer.setSize(this.container.clientWidth, this.container.clientHeight)\n      this.renderer.setPixelRatio(window.devicePixelRatio)\n      this.container.appendChild(this.renderer.domElement)\n      // 相机设置\n      const fov = 45\n      const aspect = 2\n      const near = 0.1\n      const far = 50\n      this.container = document.getElementById('container')\n      camera = new THREE.PerspectiveCamera(\n        fov, aspect, near, far\n      )\n      camera.position.set(25, 15, 15) // 设置相机位置\n      camera.lookAt(0, 0, 0)\n      // 光源设置\n      // 点光源\n      let point = new THREE.PointLight(0xffffff)\n      point.position.set(400, 200, 300) // 点光源位置\n      scene.add(point) // 点光源添加到场景中\n      // 环境光\n      let ambient = new THREE.AmbientLight(0x444444)\n      scene.add(ambient)\n      this.clock = new THREE.Clock()\n      // onresize 事件会在窗口被调整大小时发生\n      window.onresize = () => {\n        // 重置渲染器输出画布canvas尺寸\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\n        // 全屏情况下：设置观察范围长宽比aspect为窗口宽高比\n        camera.aspect = window.innerWidth / window.innerHeight\n        // 如果相机的一些属性发生了变化，需要执行updateProjectionMatrix ()方法更新相机的投影矩阵\n        camera.updateProjectionMatrix()\n      }\n      controls = new OrbitControls(camera, this.renderer.domElement)\n      controls.target.set(5, 0, -10)\n      controls.update()\n      // 模型加载\n      this.objectLoader('./static/1楼墙体/1楼墙体.gltf', 'floor', 1)\n      this.objectLoader('./static/2楼墙体/2楼墙体.gltf', 'floor', 2)\n      this.objectLoader('./static/3楼墙体/3楼墙体.gltf', 'floor', 3)\n      this.objectLoader('./static/4楼墙体/4楼墙体.gltf', 'floor', 4)\n      this.objectLoader('./static/5楼墙体/5楼墙体.gltf', 'floor', 5)\n      this.objectLoader('./static/6楼墙体/6楼墙体.gltf', 'floor', 6)\n      this.objectLoader('./static/1楼桌椅/1楼桌椅.gltf', 'context', 1)\n      this.objectLoader('./static/2楼桌椅/2楼桌椅.gltf', 'context', 2)\n      this.objectLoader('./static/3楼桌椅/3楼桌椅.gltf', 'context', 3)\n      this.objectLoader('./static/4楼桌椅/4楼桌椅.gltf', 'context', 4)\n      this.objectLoader('./static/5楼桌椅/5楼桌椅.gltf', 'context', 5)\n      this.objectLoader('./static/6楼桌椅/6楼桌椅.gltf', 'context', 6)\n      const axesHelper = new THREE.AxesHelper(150);\n      scene.add(axesHelper)\n      // 漫游数据\n      // 位置\n      // 整体\n      positions[0] = { px: 20, py: 10, pz: 10 }\n      positions[1] = { px: 25, pz: -22, py: 10 }\n      positions[2] = { px: -13, pz: -22, py: 10 }\n      positions[3] = { px: -16, pz: 10, py: 10 }\n      // 1L\n      positions[4] = { px: 20, py: 5, pz: 10 }\n      positions[5] = { px: 25, pz: -22, py: 5 }\n      positions[6] = { px: -13, pz: -22, py: 5 }\n      positions[7] = { px: -16, pz: 10, py: 5 }\n      // 2L\n      positions[8] = { px: 20, py: 6, pz: 10 }\n      positions[9] = { px: 25, pz: -22, py: 6 }\n      positions[10] = { px: -13, pz: -22, py: 6 }\n      positions[11] = { px: -16, pz: 10, py: 6 }\n      // 3L\n      positions[12] = { px: 20, py: 7, pz: 10 }\n      positions[13] = { px: 25, pz: -22, py: 7 }\n      positions[14] = { px: -13, pz: -22, py: 7 }\n      positions[15] = { px: -16, pz: 10, py: 7 }\n      // 4L\n      positions[16] = { px: 20, py: 8, pz: 10 }\n      positions[17] = { px: 25, pz: -22, py: 8 }\n      positions[18] = { px: -13, pz: -22, py: 8 }\n      positions[19] = { px: -16, pz: 10, py: 8 }\n      // 5L\n      positions[20] = { px: 20, py: 9, pz: 10 }\n      positions[21] = { px: 25, pz: -22, py: 9 }\n      positions[22] = { px: -13, pz: -22, py: 9 }\n      positions[23] = { px: -16, pz: 10, py: 9 }\n      // 6L\n      positions[24] = { px: 20, py: 10, pz: 10 }\n      positions[25] = { px: 25, pz: -22, py: 10 }\n      positions[26] = { px: -13, pz: -22, py: 10 }\n      positions[27] = { px: -16, pz: 10, py: 10 }\n      // 动画\n      for (let i = 0; i <= 27; ++i) {\n        tweens[i] = new TWEEN.Tween(positions[i]).to(positions[(i + 1) % 4 === 0 ? i - 3 : i + 1], 5500)\n          .onUpdate(function (object) {\n            camera.position.x = object.px\n            camera.position.z = object.pz\n            camera.position.y = object.py\n            if (i >= 0 && i <= 3) {\n              camera.lookAt(6.5, 1, -6)\n            } else if (i >= 4 && i <= 7) {\n              camera.lookAt(6.5, 2, -6)\n            } else if (i >= 8 && i <= 11) {\n              camera.lookAt(6.5, 2, -6)\n            } else if (i >= 12 && i <= 15) {\n              camera.lookAt(6.5, 3, -6)\n            } else if (i >= 16 && i <= 19) {\n              camera.lookAt(6.5, 4, -6)\n            } else if (i >= 20 && i <= 23) {\n              camera.lookAt(6.5, 4, -6)\n            } else if (i >= 24 && i <= 27) {\n              camera.lookAt(6.5, 5, -6)\n            }\n          })\n        tweens[i].easing(TWEEN.Easing.Quadratic.Out)\n      }\n      for (let i = 0; i <= 27; ++i) {\n        tweens[i].chain(tweens[(i + 1) % 4 === 0 ? i - 3 : i + 1])\n      }\n    },\n    // 更新\n    animate () {\n      TWEEN.update()\n      requestAnimationFrame(this.animate)\n      this.renderer.render(scene, camera)\n    },\n    // 模型加载\n    objectLoader (url, type, id) {\n      this.gltfLoader = new GLTFLoader()\n      this.gltfLoader.load(url, (gltf) => {\n        const obj = gltf.scene\n        obj.position.x = 0\n        obj.position.y = 0\n        obj.position.z = 0\n        obj.scale.x = 0.2\n        obj.scale.y = 0.2\n        obj.scale.z = 0.2\n        if (type === 'floor') {\n          floor[id] = new THREE.Group()\n          floor[id].add(obj)\n          scene.add(floor[id])\n          floor[id].visible = false\n        } else if (type === 'context') {\n          context[id] = new THREE.Group()\n          context[id].add(obj)\n          scene.add(context[id])\n          context[id].visible = false\n        }\n      })\n    }\n  }\n}\n</script>\n\n<style>\n#container {\n  position: absolute;\n  right: 0;\n  width: 80%;\n}\n</style>\n"]}]}